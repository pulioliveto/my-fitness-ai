import { NextResponse } from 'next/server';
import openai from '@/lib/api/openai';
import type { GenerateRoutineRequest, GenerateRoutineResponse } from '@/types/routine';
// Importar la funci√≥n desde el archivo que ya creaste
import { getDefaultRoutine } from '@/lib/services/defaultRoutine';

export async function POST(request: Request) {
  const isDevelopment = process.env.NEXT_PUBLIC_DEVELOPMENT_MODE === 'true';
  console.log(`üöÄ API: Iniciando generaci√≥n de rutina ${isDevelopment ? 'en modo desarrollo' : 'con OpenAI'}`);
  
  try {
    // 1. PRIMERO: Extraer datos del request
    const userData: GenerateRoutineRequest = await request.json();
    console.log("üìä API: Datos recibidos:", JSON.stringify(userData));
    
    // 2. Validar y corregir datos
    if (!userData.fitness_goals || !Array.isArray(userData.fitness_goals) || userData.fitness_goals.length === 0) {
      console.log("‚ö†Ô∏è API: Corrigiendo fitness_goals vac√≠o o inv√°lido");
      userData.fitness_goals = ["gain_muscle"]; 
    }
    
    if (!userData.activity_level) {
      console.log("‚ö†Ô∏è API: Asignando activity_level predeterminado");
      userData.activity_level = "moderate";
    }
    
    console.log("üîß API: Datos validados:", JSON.stringify(userData));
    
    // 3. DESPU√âS: Verificar modo desarrollo
    if(isDevelopment) {
      console.log("üîß API: Modo desarrollo activado, usando rutina por defecto");
      // Ahora userData ya est√° definida y se puede usar
      const defaultRoutine = getDefaultRoutine(userData);
      return NextResponse.json({ routine: defaultRoutine, source: "development" }, { status: 200 });
    }
    
    // Verificar API key
    if (!process.env.OPENAI_API_KEY) {
      console.error("‚ùå API: No se encontr√≥ la API key de OpenAI");
      return NextResponse.json(
        { error: 'Error de configuraci√≥n: API key de OpenAI no encontrada' },
        { status: 500 }
      );
    }
    
    console.log("üîë API: API key de OpenAI configurada correctamente");
    
    // Construir prompt para OpenAI
    const prompt = `
      Genera una rutina de ejercicios personalizada basada en los siguientes datos:
      - Altura: ${userData.height || 'No especificada'} cm
      - Peso: ${userData.weight || 'No especificado'} kg
      - Edad: ${userData.age || 'No especificada'} a√±os
      - G√©nero: ${userData.gender || 'No especificado'}
      - Objetivos: ${userData.fitness_goals.join(', ')}
      - Nivel de actividad: ${userData.activity_level}
      
      IMPORTANTE:
      - ADAPTA LA RUTINA ESPEC√çFICAMENTE PARA ${userData.gender === 'male' ? 'UN HOMBRE' : userData.gender === 'female' ? 'UNA MUJER' : 'UNA PERSONA'}.
      - ENFOCA EL PLAN EN LOS OBJETIVOS: ${userData.fitness_goals.join(', ')}.
      - AJUSTA LA INTENSIDAD SEG√öN EL NIVEL DE ACTIVIDAD: ${userData.activity_level}.
      
      Si el objetivo es ganar m√∫sculo: incluye ejercicios compuestos, series de 8-12 repeticiones, y enfatiza la progresi√≥n de peso.
      Si el objetivo es perder peso: incluye circuitos, cardio HIIT, y ejercicios que quemen m√°s calor√≠as.
      Si el objetivo es mejorar resistencia: incluye series m√°s largas, descansos m√°s cortos y ejercicios funcionales.
      
      Para nivel principiante: menos volumen, m√°s explicaciones t√©cnicas.
      Para nivel intermedio: volumen moderado, variaci√≥n de ejercicios.
      Para nivel avanzado: mayor volumen, t√©cnicas avanzadas como supersets o dropsets.
      
      Proporciona un plan de entrenamiento semanal detallado con:
      1. Ejercicios espec√≠ficos para cada d√≠a (3-5 d√≠as por semana)
      2. Series y repeticiones para cada ejercicio
      3. Descanso recomendado entre series
      4. Consejos de nutrici√≥n b√°sicos (5 consejos) ajustados al objetivo principal
      5. Recomendaciones para el nivel de experiencia indicado (3 consejos)
      
      Formato la respuesta en JSON con estas secciones:
      - weeklyPlan (array de objetos d√≠a)
      - nutritionTips (array de objetos consejo)
      - beginnerTips (array de objetos consejo)
    `;
    
    // Antes de llamar a OpenAI
    console.log("ü§ñ API: Llamando a OpenAI...");
    
    // Hacer petici√≥n a OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { 
          role: "system", 
          content: "Eres un entrenador personal experto especializado en crear planes de fitness personalizados. Responde solo en espa√±ol y en el formato JSON solicitado." 
        },
        { role: "user", content: prompt }
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
    });
    
    console.log("‚úÖ API: Respuesta recibida de OpenAI");
    
    // Extraer y validar la respuesta
    const responseContent = completion.choices[0].message.content;
    
    if (!responseContent) {
      console.error("‚ùå API: OpenAI devolvi√≥ respuesta vac√≠a");
      throw new Error('La API de OpenAI no devolvi√≥ contenido');
    }
    
    console.log("üîç API: Parseando respuesta JSON...");
    const routineData = JSON.parse(responseContent);
    console.log("‚úÖ API: Rutina generada y parseada correctamente");
    
    // Devolver la respuesta formateada
    const response: GenerateRoutineResponse = {
      routine: routineData
    };
    
    return NextResponse.json(response);
  } catch (error: any) {
    console.error('‚ùå API Error:', error);
    
    // En caso de error, tambi√©n usar la rutina predeterminada como respaldo
    console.log("‚ö†Ô∏è API: Error capturado, usando rutina predeterminada como respaldo");
    
    try {
      const userData = { fitness_goals: ["gain_muscle"], activity_level: "moderate" };
      const defaultRoutine = getDefaultRoutine(userData);
      
      return NextResponse.json({
        routine: defaultRoutine
      });
    } catch (fallbackError) {
      console.error('üí• Error cr√≠tico:', fallbackError);
      
      return NextResponse.json(
        { error: `Error al generar la rutina: ${error.message}` },
        { status: 500 }
      );
    }
  }
}

